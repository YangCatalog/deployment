version: '3'

services:

  confd:
    container_name: yc-confd
    build:
      context: .
      dockerfile: ./confd/Dockerfile
      args:
        - CONFD_VERSION=${CONFD_VERSION}
        - CONFD_PASSWORD_HASH=${CONFD_PASSWORD_HASH}
    ports:
      - "8008:8008"
      - "8888:8888"
    volumes:
      - ${KEY_FILE}:/a/system/yangcatalog.org.key
      - ${CERT_FILE}:/a/system/yangcatalog.org.crt
      - ${CONFD_LOG}:/var/yang/logs
    networks:
      - confd
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8008/restconf", "-u", "admin:${CONFD_PASSWORD}", "-i"]
      interval: 30s
      timeout: 10s
      retries: 5
    restart: always

  backend:
    container_name: yc-backend
    image: catalog_backend_api:latest
    build:
      context: .
      dockerfile: ./backend/Dockerfile
      args:
        - YANG_ID=${YANG_ID}
        - YANG_GID=${YANG_GID}
        - CRON_MAIL_TO=${CRON_MAIL_TO}
        - YANGCATALOG_CONFIG_PATH=${YANGCATALOG_CONFIG_PATH}
    volumes:
      - ${YANG_RESOURCES}/conf/yangcatalog.conf:/etc/yangcatalog/yangcatalog.conf:rw
      - ${YANG_RESOURCES}:/var/yang:rw
      - ${YANG_RESOURCES}/nginx/YANG-modules:/usr/share/nginx/html/YANG-modules:rw
      - ${YANG_RESOURCES}/nginx/compatibility:/usr/share/nginx/html/compatibility:rw
      - ${YANG_RESOURCES}/nginx/private:/usr/share/nginx/html/private:rw
      - ${YANG_RESOURCES}/nginx/results:/usr/share/nginx/html/results:rw
      - ${YANG_RESOURCES}/nginx/stats:/usr/share/nginx/html/stats:rw
      - ${YANG_RESOURCES}/nginx/drafts:/usr/share/nginx/html/drafts:rw
      - run:/var/run/yang
      - nginx-conf:/etc/nginx:rw
      - downloadables:/usr/share/nginx/html/downloadables
    networks:
      - confd
      - backend
      - opensearch
      - rabbitmq
      - frontend
      - redis
      - matomo
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8008/api/healthcheck"]
      interval: 30s
      timeout: 10s
      retries: 5
    restart: always
    depends_on:
      - confd
      - redis
      - rabbit

  yangre:
    container_name: yc-yangre
    build:
      context: yangre
      dockerfile: Dockerfile
      args:
        - YANG_ID=${YANG_ID}
        - YANG_GID=${YANG_GID}
        - YANGLINT_VERSION=${YANGLINT_VERSION}
    volumes:
      - run:/var/run/yang
      - ${YANG_RESOURCES}:/var/yang:rw
    networks:
      - frontend
      - matomo
    healthcheck:
      test: curl -f http://yc-frontend/yangre/v1/ping
      interval: 30s
      timeout: 10s
      retries: 5      
    restart: always

  celery-worker:
    container_name: yc-celery-worker
    image: catalog_backend_api:latest
    restart: always
    user: '${YANG_ID}:${YANG_GID}'
    command: bash -c "chown -R yang:yang /var/run/yang; service postfix start; celery -A jobs.celery:celery_app worker -l INFO"
    volumes:
      - ${YANG_RESOURCES}/conf/yangcatalog.conf:/etc/yangcatalog/yangcatalog.conf:ro
      - ${YANG_RESOURCES}:/var/yang:rw
      - ${YANG_RESOURCES}/nginx/YANG-modules:/usr/share/nginx/html/YANG-modules:rw
      - ${YANG_RESOURCES}/nginx/compatibility:/usr/share/nginx/html/compatibility:rw
      - ${YANG_RESOURCES}/nginx/private:/usr/share/nginx/html/private:rw
      - ${YANG_RESOURCES}/nginx/results:/usr/share/nginx/html/results:rw
      - downloadables:/usr/share/nginx/html/downloadables
    networks:
      - confd
      - backend
      - opensearch
      - rabbitmq
      - frontend
      - redis
    depends_on:
      - backend
      - rabbit
      - redis

  api-recovery:
    container_name: yc-api-recovery
    image: catalog_backend_api:latest
    command: bash -c "source bin/activate; python recovery/recovery.py --load"
    volumes:
      - ${YANG_RESOURCES}/conf/yangcatalog.conf:/etc/yangcatalog/yangcatalog.conf:ro
      - ${YANG_RESOURCES}:/var/yang:rw
      - run:/var/run/yang
    networks:
      - confd
      - backend
      - redis
    depends_on:
      - backend

  frontend:
    container_name: yc-frontend
    build:
      context: .
      dockerfile: frontend/Dockerfile
      args:
        - YANG_ID=${YANG_ID}
        - YANG_GID=${YANG_GID}
        - NGINX_FILES=${NGINX_FILES}
    ports:
      - "80:80"
      - "443:443"
      - "10873:873"
    volumes:
      - ${YANG_RESOURCES}/nginx/compatibility:/usr/share/nginx/html/compatibility:rw
      - ${YANG_RESOURCES}/nginx/drafts:/usr/share/nginx/html/drafts:rw
      - ${YANG_RESOURCES}/nginx/private:/usr/share/nginx/html/private:rw
      - ${YANG_RESOURCES}/nginx/results:/usr/share/nginx/html/results:rw
      - ${YANG_RESOURCES}/nginx/stats:/usr/share/nginx/html/stats:rw
      - ${YANG_RESOURCES}/nginx/YANG-modules:/usr/share/nginx/html/YANG-modules:rw
      - ${YANG_RESOURCES}/all_modules:/usr/share/nginx/html/all_modules:ro
      - ${YANG_RESOURCES}/nginx/notifications:/usr/share/nginx/html/notifications:rw
      - ${NGINX_LOG}:/var/log/nginx:rw
      - ${KEY_FILE}:/a/system/yangcatalog.org.key
      - ${CERT_FILE}:/a/system/yangcatalog.org.crt
      - main-webroot:/usr/share/nginx/html
      - admin-webroot:/usr/share/nginx/html/admin
      - downloadables:/usr/share/nginx/html/downloadables
      - docs:/usr/share/nginx/html/slate
      - run:/var/run/yang
      - nginx-conf:/etc/nginx:rw
    networks:
      - frontend
    restart: always

  admin-ui:
    container_name: yc-admin-ui
    build:
      context: frontend/admin-ui
      dockerfile: Dockerfile
      args:
        - YANG_ID=${YANG_ID}
        - YANG_GID=${YANG_GID}
    volumes:
      - admin-webroot:/usr/share/nginx/html/admin
      - ${YANG_RESOURCES}:/var/yang:rw
    networks:
      - frontend

  yangcatalog-ui:
    container_name: yc-yangcatalog-ui
    build:
      context: frontend/yangcatalog-ui
      dockerfile: Dockerfile
      args:
        - YANG_ID=${YANG_ID}
        - YANG_GID=${YANG_GID}
    volumes:
      - main-webroot:/usr/share/nginx/html
      - ${YANG_RESOURCES}:/var/yang:rw
    networks:
      - frontend

  yangvalidator:
    container_name: yc-yangvalidator
    image: yangvalidator:latest
    build:
      context: .
      dockerfile: ./yang-validator-extractor/Dockerfile
      args:
        - YANG_ID=${YANG_ID}
        - YANG_GID=${YANG_GID}
        - YANGCATALOG_CONFIG_PATH=${YANGCATALOG_CONFIG_PATH}
        - CONFD_VERSION=${CONFD_VERSION}
        - YANGLINT_VERSION=${YANGLINT_VERSION}
        - XYM_VERSION=${XYM_VERSION}
    volumes:
      - ${YANG_RESOURCES}/conf/yangcatalog.conf:/etc/yangcatalog/yangcatalog.conf:ro
      - ${YANG_RESOURCES}:/var/yang:rw
      - run:/var/run/yang
    networks:
      - frontend
      - matomo
    healthcheck:
      test: curl -f http://yc-frontend/yangvalidator/v2/ping
      interval: 30s
      timeout: 10s
      retries: 5      
    restart: always

  # opensearch:
  #   container_name: yc-opensearch
  #   build:
  #     context: opensearch
  #     dockerfile: Dockerfile
  #     args:
  #       - OPENSEARCH_ID=${OPENSEARCH_ID}
  #       - OPENSEARCH_GID=${OPENSEARCH_GID}
  #   environment:
  #     - bootstrap.memory_lock=true
  #   ulimits:
  #     memlock:
  #       soft: -1
  #       hard: -1
  #   volumes:
  #     - ${OPENSEARCH_LOG}:/var/log/opensearch
  #     - ${OPENSEARCH_DATA}:/var/lib/opensearch
  #   networks:
  #     - opensearch
  #   restart: always
  
#  kibana:
#     container_name: yc-kibana
#     depends_on:
#       - opensearch
#     image: kibana:7.10.1
#     ports:
#       - '5601:5601'
#     networks:
#       - opensearch

  # matomo:
  #   container_name: yc-matomo
  #   image: matomo:4.10
  #   restart: always
  #   ports:
  #     - 8384:80
  #   environment:
  #     - MATOMO_DATABASE_HOST=matomo-db
  #     - MATOMO_DATABASE_TABLES_PREFIX=mat_
  #     - MATOMO_DATABASE_USERNAME=matomo
  #     - MATOMO_DATABASE_PASSWORD=matomo
  #     - MATOMO_DATABASE_DBNAME=matomo
  #   volumes:
  #     - matomo:/var/www/html
  #   networks:
  #     - matomo
  #   links:
  #     - matomo-db:matomo-db

  # matomo-db:
  #   container_name: yc-matomo-db
  #   image: mariadb:10.7
  #   restart: always
  #   networks:
  #     - matomo    
  #   environment:
  #     MYSQL_DATABASE: matomo
  #     MYSQL_USER: matomo
  #     MYSQL_PASSWORD: matomo
  #     MYSQL_RANDOM_ROOT_PASSWORD: '1'
  #   volumes:
  #     - matomo-db:/var/lib/mysql

  rabbit:
    container_name: yc-rabbit
    image: "rabbitmq:3-management"
    environment:
      RABBITMQ_ERLANG_COOKIE: "SWQOKODSQALRPCLNMEQG"
      RABBITMQ_DEFAULT_USER: ${RABBITMQ_USER}
      RABBITMQ_DEFAULT_PASS: ${RABBITMQ_PASSWORD}
      RABBITMQ_DEFAULT_VHOST: "/"
    labels:
      NAME: "rabbitmq1"
    volumes: []
      # - "./enabled_plugins:/etc/rabbitmq/enabled_plugins"
      # - "./rabbitmq.config:/etc/rabbitmq/rabbitmq.config:ro"
      # - "./autocluster-0.4.1.ez:/usr/lib/rabbitmq/lib/rabbitmq_server-3.5.5/plugins/autocluster-0.4.1.ez"
    networks:
      - rabbitmq
    healthcheck:
      test: ["CMD", "rabbitmqctl", "status"]
      interval: 30s
      timeout: 10s
      retries: 5
    restart: always

  module-compilation:
    container_name: yc-module-compilation
    build:
      context: .
      dockerfile: ./module-compilation/Dockerfile
      args:
        - YANG_ID=${YANG_ID}
        - YANG_GID=${YANG_GID}
        - CRON_MAIL_TO=${CRON_MAIL_TO}
        - YANGCATALOG_CONFIG_PATH=${YANGCATALOG_CONFIG_PATH}
        - CONFD_VERSION=${CONFD_VERSION}
        - YANGLINT_VERSION=${YANGLINT_VERSION}
        - XYM_VERSION=${XYM_VERSION}
    volumes:
      - ${YANG_RESOURCES}/conf/yangcatalog.conf:/etc/yangcatalog/yangcatalog.conf:ro
      - ${YANG_RESOURCES}:/var/yang:rw
      - ${YANG_RESOURCES}/nginx/YANG-modules:/usr/share/nginx/html/YANG-modules:rw
      - ${YANG_RESOURCES}/nginx/compatibility:/usr/share/nginx/html/compatibility:rw
      - ${YANG_RESOURCES}/nginx/private:/usr/share/nginx/html/private:rw
      - ${YANG_RESOURCES}/nginx/results:/usr/share/nginx/html/results:rw
      - ${YANG_RESOURCES}/nginx/drafts:/usr/share/nginx/html/drafts:rw
      - downloadables:/usr/share/nginx/html/downloadables
    networks:
      - frontend
      - confd
      - redis
    restart: always

  redis:
    container_name: yc-redis
    build:
      context: redis
      dockerfile: Dockerfile
      args:
        - YANG_ID=${YANG_ID}
        - YANG_GID=${YANG_GID}
    volumes:
      - ${REDIS_VOLUME}:/data:rw
      # - ${YANG_RESOURCES}/conf/redis.conf:/etc/yangcatalog/redis.conf:ro
    networks:
      - redis
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 5
    restart: always

  documentation:
    container_name: yc-documentation
    image: slatedocs/slate
    volumes:
      - ./backend/documentation/source/:/srv/slate/source
      - docs:/srv/slate/build
    depends_on:
      - frontend

volumes:
  main-webroot:
  admin-webroot:
  run:
  nginx-conf:
  docs:
  downloadables:
  matomo:
  matomo-db:

networks:
  frontend:
    driver: bridge
  confd:
    driver: bridge
  backend:
    driver: bridge
  opensearch:
    driver: bridge
  rabbitmq:
    driver: bridge
  redis:
    driver: bridge
  matomo:
    driver: bridge
